var fs = require('fs');
var node_path = require('path');

var peg = require('pegjs');



function requirePath(path) {
	return require(path.join('/'));
}

function getPath(parts) {
	return node_path.join.apply(node_path, parts);
}

function read(path) {
	return fs.readFileSync(getPath(path), 'utf-8');
}

function write(path, data) {
	fs.writeFileSync(getPath(path), data);
}

/**
 * This method relies a lot on file system layout conventions.
 *
 * @param[in] {String} language The name of the language, corresponding to the name of the folder containing a parser module
 * @param[in][opt] {String} parserName The name of the folder containing the parser module inside the mode folder
 */
function build(language, parserName) {
	// Input arguments processing ----------------------------------------------

	// ---------------------------------------------------------------- language

	if (language == null) {
		throw Error('No language given');
	}

	// -------------------------------------------------------------- parserName

	if (parserName == null) {
		parserName = 'parser';
	}

	// ------------------------------------------------------------------- Paths

	var rootPath = [__dirname, '..', '..'];
	var basePath = rootPath.concat(['app', 'node_modules', 'modes', language, parserName]);
	var optionsPath = basePath.concat('options');
	var grammarPath = basePath.concat('grammar.pegjs');
	var parserPath = basePath.concat('grammar.js');

	// ------------------------------------------------------------------ Inputs

	var options = requirePath(optionsPath);
	var grammar = read(grammarPath);

	// -------------------------------------------------------------- Processing

	options.output = 'source';
	var source = peg.buildParser(grammar, options);
	source = 'module.exports = ' + source;

	// ----------------------------------------------------------------- Outputs

	write(parserPath, source);
}



exports.build = build;
