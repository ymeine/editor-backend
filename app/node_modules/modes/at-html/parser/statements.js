var atContext = require('ariatemplates').context;


atContext.Aria.load({
	classes: ["aria.templates.Statements"],
	oncomplete: function() {
		var statements = atContext.aria.templates.Statements.ALLSTATEMENTS;

		module.exports = {

			/**
			 * Returns true if the statement exists in AT grammar
			 *
			 * @param {String} stm Statement name
			 * @return {Boolean}
			 */
			isValid: function(stm) {
				return stm in statements;
			},

			/**
			 * Returns true/false if the statement can be used as a container or not. It returns null if it can be used in both ways.
			 * It also returns null if the statement does not exist, so this method should be always be used after making sure that the statement is valid.
			 *
			 * @param {String} stm Statement name
			 * @return {Boolean}
			 */
			isContainer: function(stm) {
				if (!this.isValid(stm)) {
					return null;
				}
				return statements[stm].container;
			},

			/**
			 * Returns true if the statement is a root statement
			 *
			 * @param {String} stm Statement name
			 * @return {Boolean}
			 */
			isRoot: function(stm) {
				if (!this.isValid(stm)) {
					return null;
				}
				return !statements[stm].inMacro;
			}
		};
	}
});

atContext.execTimeouts();