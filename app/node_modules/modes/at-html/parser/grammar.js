module.exports = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { comment: peg$parsecomment, multiLineComment: peg$parsemultiLineComment, singleLineComment: peg$parsesingleLineComment, wsSequence: peg$parsewsSequence, tabs: peg$parsetabs, eols: peg$parseeols, spaces: peg$parsespaces, doubleQuoteString: peg$parsedoubleQuoteString, singleQuoteString: peg$parsesingleQuoteString, string: peg$parsestring, bracedContent: peg$parsebracedContent, __: peg$parse__, expression: peg$parseexpression, genericContent: peg$parsegenericContent, id: peg$parseid, inlineStatement: peg$parseinlineStatement },
        peg$startRuleFunction  = peg$parsecomment,

        peg$c0 = null,
        peg$c1 = "",
        peg$c2 = function(opening, spaces, id, param, closing) {
        	var node = Node('inline-statement', line(), column(), offset(), text());

        	node.add('opening', opening);

        	node.add('id', id);
        	if (!statements.isValid(id.source)) {
        		node.addError("Statement " + id.source + "is not a valid statement. Refer to http://www.ariatemplates.com/usermanual/latest/writing_templates for a statements description");
        	} else if (statements.isContainer(id.source)) {
        		node.addError("Statement " + id.source + "should be used as a container({" + id.source + " ...}...{/" + id.source + "}). Refer to http://www.ariatemplates.com/usermanual/latest/writing_templates for a statements description");
        	}

        	if (param !== "") {
        		node.addList('param', param);
        	}

        	node.add('closing', closing);

        	return node;
        },
        peg$c3 = "{",
        peg$c4 = "\"{\"",
        peg$c5 = function() {
        	return Node('opening', line(), column(), offset(), text());
        },
        peg$c6 = "/}",
        peg$c7 = "\"/}\"",
        peg$c8 = function() {
        	return Node('closing', line(), column(), offset(), text());
        },
        peg$c9 = [],
        peg$c10 = function(value) {
        	var nodes = lib.flatten(value), nodeCount = nodes.length, contentStart, contentEnd;
        	for (contentStart = 0; contentStart < nodeCount && nodes[contentStart].type.element != 'content'; contentStart++) {}
        	for (contentEnd = nodeCount - 1; contentEnd >= 0 && nodes[contentEnd].type.element != 'content'; contentEnd--) {}
        	contentEnd++;
        	if (contentEnd > contentStart) {
        		var mergedNode = lib.NodeClass.merge(nodes.splice(contentStart, contentEnd - contentStart));
        		mergedNode.set('value', mergedNode.source);
        		nodes.splice(contentStart, 0, mergedNode);
        	}
        	return nodes;
        },
        peg$c11 = /^[^{} \r\n\t]/,
        peg$c12 = "[^{} \\r\\n\\t]",
        peg$c13 = function(value) {
        	var node = Node('content', line(), column(), offset(), text());
        	node.set('value', value);
        	return node;
        },
        peg$c14 = function(opening, content, closing) {
        	var node = Node('expression', line(), column(), offset(), text());

        	node.add('opening', opening);

        	if (content !== "") {
        		node.addList('param', content);
        	}

        	if (closing) {
        		node.add('closing', closing);
        	} else {
        		node.addError("Expression should be closed.");
        	}

        	return node;
        },
        peg$c15 = "${",
        peg$c16 = "\"${\"",
        peg$c17 = "}",
        peg$c18 = "\"}\"",
        peg$c19 = /^[^{}]/,
        peg$c20 = "[^{}]",
        peg$c21 = "\\",
        peg$c22 = "\"\\\\\"",
        peg$c23 = function(opening, raw, closing) {
        	var node = Node('string', line(), column(), offset(), text());

        	node.add('opening', opening);
        	if (raw !== "") {
        		node.add('raw', raw);
        	}
        	node.add('closing', closing);

        	return node;
        },
        peg$c24 = "\"",
        peg$c25 = "\"\\\"\"",
        peg$c26 = function() {
        	return Node('quotes.double', line(), column(), offset(), text());
        },
        peg$c27 = "any character",
        peg$c28 = function() {
        	return Node('doubleQuoteString.content', line(), column(), offset(), text());
        },
        peg$c29 = "'",
        peg$c30 = "\"'\"",
        peg$c31 = function() {
        	return Node('quotes.single', line(), column(), offset(), text());
        },
        peg$c32 = function() {
        	return Node('singleQuoteString.content', line(), column(), offset(), text());
        },
        peg$c33 = function(elements) {
        	return lib.flatten(elements);
        },
        peg$c34 = function(opening, content, closing) {
        	var node = Node('multi-line-comment', line(), column(), offset(), text());

        	node.add('opening', opening);
        	if (content !== "") {
        		node.add('content', content);
        	}
        	if (closing) {
        		node.add('closing', closing);
        	} else {
        		node.addError("Multi line comment has not been closed.");
        	}

        	return node;
        },
        peg$c35 = "/*",
        peg$c36 = "\"/*\"",
        peg$c37 = "*/",
        peg$c38 = "\"*/\"",
        peg$c39 = function() {
        	return Node('content', line(), column(), offset(), text());
        },
        peg$c40 = function(opening, content, closing) {
        	var node = Node('single-line-comment', line(), column(), offset(), text());

        	node.add('opening', opening);
        	if (content !== "") {
        		node.add('content', content);
        	}
        	node.add('closing', closing);

        	return node;
        },
        peg$c41 = "//",
        peg$c42 = "\"//\"",
        peg$c43 = function() {
        	return Node('opening', line(), column(), offset(), text());

        },
        peg$c44 = function(node) {
        	return Node('closing', line(), column(), offset(), text());
        },
        peg$c45 = function() {
        	return Node('at-id', line(), column(), offset(), text());
        },
        peg$c46 = /^[_]/,
        peg$c47 = "[_]",
        peg$c48 = /^[ \r\n\t]/,
        peg$c49 = "[ \\r\\n\\t]",
        peg$c50 = " ",
        peg$c51 = "\" \"",
        peg$c52 = function(content) {
        	var node = Node('spaces', line(), column(), offset(), text());
        	node.set('size', content.length);
        	return node;
        },
        peg$c53 = "\t",
        peg$c54 = "\"\\t\"",
        peg$c55 = function(content) {
        	var node = Node('tabs', line(), column(), offset(), text());
        	node.set('size', content.length);
        	return node;
        },
        peg$c56 = function(content) {
        	var node = Node('eols', line(), column(), offset(), text());
        	node.set('size', content.length);
        	return node;
        },
        peg$c57 = "\r\n",
        peg$c58 = "\"\\r\\n\"",
        peg$c59 = "\n",
        peg$c60 = "\"\\n\"",
        peg$c61 = "\r",
        peg$c62 = "\"\\r\"",
        peg$c63 = /^[a-zA-Z]/,
        peg$c64 = "[a-zA-Z]",
        peg$c65 = /^[0-9]/,
        peg$c66 = "[0-9]",

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i = 0;

      expected.sort();

      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function peg$parseinlineStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseinlineOpening();
      if (s1 !== null) {
        s2 = peg$parsewsSequence();
        if (s2 === null) {
          s2 = peg$c1;
        }
        if (s2 !== null) {
          s3 = peg$parseid();
          if (s3 !== null) {
            s4 = peg$parseinlineStatementParam();
            if (s4 === null) {
              s4 = peg$c1;
            }
            if (s4 !== null) {
              s5 = peg$parseinlineClosing();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c2(s1, s2, s3, s4, s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinlineOpening() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c5();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseinlineClosing() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c6) {
        s1 = peg$c6;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c8();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseinlineStatementParam() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewsSequence();
      if (s2 === null) {
        s2 = peg$parsebraced();
        if (s2 === null) {
          s2 = peg$parsenonbracedNospaceNoSlash();
        }
      }
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parsewsSequence();
        if (s2 === null) {
          s2 = peg$parsebraced();
          if (s2 === null) {
            s2 = peg$parsenonbracedNospaceNoSlash();
          }
        }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c10(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenonbracedNospaceNoSlash() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsecommentedBrackets();
      if (s3 === null) {
        s3 = peg$currPos;
        if (peg$c11.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s4 !== null) {
          s5 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c6) {
            s6 = peg$c6;
            peg$currPos += 2;
          } else {
            s6 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          peg$silentFails--;
          if (s6 === null) {
            s5 = peg$c1;
          } else {
            peg$currPos = s5;
            s5 = peg$c0;
          }
          if (s5 !== null) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
      }
      if (s3 !== null) {
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parsecommentedBrackets();
          if (s3 === null) {
            s3 = peg$currPos;
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s4 !== null) {
              s5 = peg$currPos;
              peg$silentFails++;
              if (input.substr(peg$currPos, 2) === peg$c6) {
                s6 = peg$c6;
                peg$currPos += 2;
              } else {
                s6 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              peg$silentFails--;
              if (s6 === null) {
                s5 = peg$c1;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 !== null) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
        }
      } else {
        s2 = peg$c0;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c13(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseexpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseexpressionOpening();
      if (s1 !== null) {
        s2 = peg$parsegenericContent();
        if (s2 === null) {
          s2 = peg$c1;
        }
        if (s2 !== null) {
          s3 = peg$parseexpressionClosing();
          if (s3 === null) {
            s3 = peg$c1;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c14(s1, s2, s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseexpressionOpening() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c15) {
        s1 = peg$c15;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c5();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseexpressionClosing() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 125) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c8();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsegenericContent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsegenericSingleContent();
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parsegenericSingleContent();
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c10(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsegenericSingleContent() {
      var s0;

      s0 = peg$parsewsSequence();
      if (s0 === null) {
        s0 = peg$parsebraced();
        if (s0 === null) {
          s0 = peg$parsenonbracedNospace();
        }
      }

      return s0;
    }

    function peg$parsebracedContent() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenonbraced();
      if (s1 === null) {
        s1 = peg$parsebraced();
      }
      if (s1 !== null) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebraced() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c3;
        peg$currPos++;
      } else {
        s3 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s3 !== null) {
        s4 = [];
        s5 = peg$parsebracedContent();
        while (s5 !== null) {
          s4.push(s5);
          s5 = peg$parsebracedContent();
        }
        if (s4 !== null) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s5 = peg$c17;
            peg$currPos++;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s5 !== null) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c13(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenonbraced() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecommentedBrackets();
      if (s2 === null) {
        if (peg$c19.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          s2 = peg$parsecommentedBrackets();
          if (s2 === null) {
            if (peg$c19.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenonbracedNospace() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$parsecommentedBrackets();
      if (s3 === null) {
        if (peg$c11.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
      }
      if (s3 !== null) {
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parsecommentedBrackets();
          if (s3 === null) {
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
          }
        }
      } else {
        s2 = peg$c0;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c13(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsecommentedBrackets() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c21;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }
      if (s2 !== null) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c3;
          peg$currPos++;
        } else {
          s3 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c4); }
        }
        if (s3 === null) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c17;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
        }
        if (s3 !== null) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestring() {
      var s0;

      s0 = peg$parsedoubleQuoteString();
      if (s0 === null) {
        s0 = peg$parsesingleQuoteString();
      }

      return s0;
    }

    function peg$parsedoubleQuoteString() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedoubleQuoteStringQuote();
      if (s1 !== null) {
        s2 = peg$parsedoubleQuoteStringContent();
        if (s2 === null) {
          s2 = peg$c1;
        }
        if (s2 !== null) {
          s3 = peg$parsedoubleQuoteStringQuote();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c23(s1, s2, s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsedoubleQuoteStringQuote() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c24;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c26();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsedoubleQuoteStringContent() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s5 = peg$c24;
        peg$currPos++;
      } else {
        s5 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      peg$silentFails--;
      if (s5 === null) {
        s4 = peg$c1;
      } else {
        peg$currPos = s4;
        s4 = peg$c0;
      }
      if (s4 !== null) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s5 !== null) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== null) {
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 34) {
            s5 = peg$c24;
            peg$currPos++;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          peg$silentFails--;
          if (s5 === null) {
            s4 = peg$c1;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== null) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
            if (s5 !== null) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
      } else {
        s2 = peg$c0;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c28();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesingleQuoteString() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesingleQuoteStringQuote();
      if (s1 !== null) {
        s2 = peg$parsesingleQuoteStringContent();
        if (s2 === null) {
          s2 = peg$c1;
        }
        if (s2 !== null) {
          s3 = peg$parsesingleQuoteStringQuote();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c23(s1, s2, s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesingleQuoteStringQuote() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c29;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c31();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesingleQuoteStringContent() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s5 = peg$c29;
        peg$currPos++;
      } else {
        s5 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      peg$silentFails--;
      if (s5 === null) {
        s4 = peg$c1;
      } else {
        peg$currPos = s4;
        s4 = peg$c0;
      }
      if (s4 !== null) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s5 !== null) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== null) {
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 39) {
            s5 = peg$c29;
            peg$currPos++;
          } else {
            s5 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          peg$silentFails--;
          if (s5 === null) {
            s4 = peg$c1;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== null) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
            if (s5 !== null) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
      } else {
        s2 = peg$c0;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c32();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewsSequence();
      if (s2 === null) {
        s2 = peg$parsecomment();
      }
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parsewsSequence();
        if (s2 === null) {
          s2 = peg$parsecomment();
        }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c33(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0;

      s0 = peg$parsemultiLineComment();
      if (s0 === null) {
        s0 = peg$parsesingleLineComment();
      }

      return s0;
    }

    function peg$parsemultiLineComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsemultiLineCommentOpening();
      if (s1 !== null) {
        s2 = peg$parsemultiLineCommentContent();
        if (s2 === null) {
          s2 = peg$c1;
        }
        if (s2 !== null) {
          s3 = peg$parsemultiLineCommentClosing();
          if (s3 === null) {
            s3 = peg$c1;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c34(s1, s2, s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemultiLineCommentOpening() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c35) {
        s1 = peg$c35;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c5();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsemultiLineCommentClosing() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c37) {
        s1 = peg$c37;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c8();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsemultiLineCommentContent() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsemultiLineCommentClosing();
      peg$silentFails--;
      if (s4 === null) {
        s3 = peg$c1;
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== null) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s4 !== null) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parsemultiLineCommentClosing();
          peg$silentFails--;
          if (s4 === null) {
            s3 = peg$c1;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== null) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
            if (s4 !== null) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c39();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesingleLineComment() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesingleLineCommentOpening();
      if (s1 !== null) {
        s2 = peg$parsesingleLineCommentContent();
        if (s2 === null) {
          s2 = peg$c1;
        }
        if (s2 !== null) {
          s3 = peg$parsesingleLineCommentClosing();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c40(s1, s2, s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsesingleLineCommentOpening() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c41) {
        s1 = peg$c41;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c43();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesingleLineCommentClosing() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseeol();
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c44(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesingleLineCommentContent() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsesingleLineCommentClosing();
      peg$silentFails--;
      if (s4 === null) {
        s3 = peg$c1;
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== null) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s4 !== null) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parsesingleLineCommentClosing();
          peg$silentFails--;
          if (s4 === null) {
            s3 = peg$c1;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== null) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
            if (s4 !== null) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c39();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseid() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseidchars();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseidrest();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseidrest();
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c45();
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseidrest() {
      var s0;

      s0 = peg$parsedigit();
      if (s0 === null) {
        s0 = peg$parseidchars();
      }

      return s0;
    }

    function peg$parseidchars() {
      var s0;

      s0 = peg$parsealpha();
      if (s0 === null) {
        s0 = peg$parseidspecial();
      }

      return s0;
    }

    function peg$parseidspecial() {
      var s0;

      if (peg$c46.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }

      return s0;
    }

    function peg$parsews() {
      var s0;

      if (peg$c48.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }

      return s0;
    }

    function peg$parsewsSequence() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsespaces();
      if (s1 === null) {
        s1 = peg$parsetabs();
        if (s1 === null) {
          s1 = peg$parseeols();
        }
      }
      if (s1 !== null) {
        while (s1 !== null) {
          s0.push(s1);
          s1 = peg$parsespaces();
          if (s1 === null) {
            s1 = peg$parsetabs();
            if (s1 === null) {
              s1 = peg$parseeols();
            }
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsespaces() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c50;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c50;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c52(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parsetabs() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 9) {
        s2 = peg$c53;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 9) {
            s2 = peg$c53;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c54); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c55(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseeols() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseeol();
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          s2 = peg$parseeol();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c56(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseeol() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c57) {
        s0 = peg$c57;
        peg$currPos += 2;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 10) {
          s0 = peg$c59;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        if (s0 === null) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c61;
            peg$currPos++;
          } else {
            s0 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
        }
      }

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsews();
      peg$silentFails--;
      if (s4 === null) {
        s3 = peg$c1;
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== null) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s4 !== null) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsews();
        peg$silentFails--;
        if (s4 === null) {
          s3 = peg$c1;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== null) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c27); }
          }
          if (s4 !== null) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== null) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsealpha() {
      var s0;

      if (peg$c63.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c65.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }

      return s0;
    }


    	var lib = require('pegjs-parser/initializer');

    	var Node = new lib.NodeInstancier('at-html');

    	var statements = require('./statements.js');


    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
