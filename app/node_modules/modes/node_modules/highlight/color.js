var prelude = require('prelude-ls');

var oop = require('oop').oop;


/** @todo Should go in a STD Math lib */
function ensureRange(min, max, value) {
	var result = value;
	if (value < min) result = min;
	else if (value > max) result = max;
	return result;
}





function postprocessColor(value) {
	return ensureRange(0, 255, value);
}



var Color = oop.Class({
	name: 'Color',

	desc: 'Represents a color as RGB.',

	schema: {
		inputToSpec: {
			'String': function(input) {
				var color = Color.defaults[input];

				if (color != null) return color;
				throw {
					msg: 'No default color under this name',
					name: input
				};
			},
			'Number': function(input) {
				return Color.greyScale(input);
			},
			'Array': function(input) {
				return Color({
					r: input[0],
					g: input[1],
					b: input[2]
				})
			}
		},
		properties: [
			{names: ['r', 'R', 'red'], type: oop.types.Number, postprocess: postprocessColor},
			{names: ['g', 'G', 'green'], type: oop.types.Number, postprocess: postprocessColor},
			{names: ['b', 'B', 'blue'], type: oop.types.Number, postprocess: postprocessColor}/*,

			{names: ['h', 'H', 'hue'], type: oop.types.Number},
			{names: ['s', 'S', 'saturation'], type: oop.types.Number},

			{names: ['l', 'L', 'lightness'], type: oop.types.Number},
			{names: ['v', 'V', 'value'], type: oop.types.Number},
			{names: ['i', 'I', 'intensity'], type: oop.types.Number}
			*/
		]
	},

	methods: {
		serialize: function() {
			return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
		},

		css: function() {
			return this.serialize();
		}
	},

	statics: {
		parse: function(input) {
			var components = /rgb\(\s*([^,]+),\s*([^,]+),\s*([^,]+)\)/.exec(input);
			return new Color({
				r: components[1],
				g: components[2],
				b: components[3]
			});
		}
	},

 	factories: {
 		rgb: {
 			args: {r: 0, g: 1, b: 2}
 		},
 		greyScale: {
 			args: {r: 0, g: 0, b: 0}
 		},
 		redScale: {
 			args: {r: 0},
 			values: {g: 0, b: 0}
 		},
 		blueScale: {
 			args: {b: 0},
 			values: {r: 0, g: 0}
 		},
 		greenScale: {
 			args: {g: 0},
 			values: {r: 0, b: 0}
 		}
 	}
});



oop.addStatics(Color, {
	defaults: {
		'black': Color.greyScale(0),
		'white': Color.greyScale(255),
		'grey': Color.greyScale(128),
		'red': Color.redScale(255),
		'green': Color.greenScale(255),
		'blue': Color.blueScale(255),
		'yellow': Color.rgb(255, 255, 0),
		'purple': Color.rgb(233, 0, 255)
	}
});





exports.Color = Color;
