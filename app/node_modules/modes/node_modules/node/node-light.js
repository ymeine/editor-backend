var oop = require('oop').oop;





var definition = require('./node-common').definition;

/**
 * @param[in] language {String|Null|Any} The language to which this node belongs to. It is likely to be a string, but you can use any value you want, except `void` because this parameter is required. You can even use `null` to indicate that the language is unknown, or non-relevant for now.
 *
 * @param[in] element {String|Null|Any} The type of the element for the language this node belongs to. It is likely to be a string, but you can use any value you want, except `void` because this parameter is required. You can even use `null` to indicate that the type is unknown, or non-relevant for now.
 *
 * @param[in] line {Number} The number of the line where the element starts.
 *
 * @param[in] column {Number} The number of the column where the element starts.
 *
 * @param[in] index {Number} The number of the character - 0-based index of the total input - where the element starts.
 *
 * @todo Maybe we should use the Range type instead of Location, but this might be too heavy for the purpose...
 */
definition.init = function(input) {
	this.type = input.type;
	this.location = input.location;
	this.source = input.source;

	// Computes line and column indexes for end position
	if (this.source != null) {
		var end = this.location.end;

		if (end == null) {
			end = this.location.end = {};
		}

		if (end.index == null) {
			end.index = this.location.start.index + this.source.length;
		}
	}

	this.properties = {};
	this.flags = {};
	this.children = [];
	this.childrenIndex = {};
	this._index = 0;
};


/***********************************************************************
 * Children management
 **********************************************************************/

/**
 * Adds a child to the children list.
 */
definition.methods._pushChild = function(id, child) {
	this.children.push(child);

	// Private properties ----------------------------------------------

	child._index = this.children.length - 1;
	child._key = id;

	// Properties ------------------------------------------------------

	child.parent = this;


	// Return ----------------------------------------------------------

	return child;
};

var Node = oop.Class(definition);





exports.Node = Node;
