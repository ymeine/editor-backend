// Initializer -----------------------------------------------------------------

{
	var lib = require('pegjs-parser/initializer');

	var Node = require('./node').NodeInstancier;
}



// Grammar ---------------------------------------------------------------------

// ------------------------------------------------------------------------ Root

start = ws0:__ nodes:(nodeList __)? {
	var node = Node('root', offset(), text(), line(), column());

	node.addList(ws0);
	if (nodes !== "") {
		node.addList(nodes[0]);
		node.addList(nodes[1]);
	}

	return node;
}

// ----------------------------------------------------------------------- Nodes

node =
	text
	/ element

// FIXME This rule is used to parse a list of nodes contained in a block element (most of the time)
// These nodes are a mix of text, elements, and comments also.
// However, concerning the comments, they are "eaten" by the "__" rule, whose content is skipped here.
// So concretely if a node contains only text except some content inside, these comments are ignored because of that.
// Review the design of this rule
nodeList = head:node rest:(__ node)* {
	return lib.listFromSequence(head, rest);
}

// ------------------------------------------------------------------------ Text
// The particularity of the text node, is that it is not delimited as other nodes - that is elements, it's just everything that is not an element. So to detect the end of a text, we need to check if an element starts.

text = (!elementStart .)+ {return Node('text', offset(), text(), line(), column());}
elementStart = "<"

// -------------------------------------------------------------------- Elements
// WARNING the precedence in alternatives is important!

element =
	cdata
	/ directive
	/ inline
	/ block

// ----------------------------------------------------------------------- CDATA

cdata = opening:cdataOpening content:cdataContent? closing:cdataClosing {
	var node = Node('cdata', offset(), text(), line(), column());

	node.add(opening);
	if (content !== "") {
		node.add(content);
	}
	node.add(closing);

	return node;
}
cdataOpening = "<![CDATA[" {return Node('opening', offset(), text(), line(), column());}
cdataClosing = "]]>" {return Node('closing', offset(), text(), line(), column());}
cdataContent = (!cdataClosing .)+ {return Node('content', offset(), text(), line(), column());}

// ------------------------------------------------------------------- Directive

directive = opening:directiveOpening ws0:__ id:id ws1:__ content:directiveContent? closing:directiveClosing {
	var node = Node('directive', line(), text())

	node.add(opening);
	node.addList(ws0);
	node.add(id);
	node.addList(ws1);
	if (content !== "") {
		node.add(content);
	}
	node.add(closing);

	return node;
}

directiveOpening = "<!" {return Node('opening', offset(), text(), line(), column());}
directiveClosing = ">" {return Node('closing', offset(), text(), line(), column());}
directiveContent = (!directiveClosing .)+ {return Node('text', offset(), text(), line(), column());}

// ---------------------------------------------------------------------- Inline

inline = opening:inlineOpening id:inlineIds ws0:__ attributes:(attributeList __)? closing:inlineClosing {
	var node = Node('inline', offset(), text(), line(), column());

	node.add(opening);
	node.add(id);
	node.addList(ws0);
	if (attributes !== "") {
		node.addList(attributes[0]);
		node.addList(attributes[1]);
	}
	node.add(closing);

	return node;
}

inlineOpening = "<" {return Node('opening', offset(), text(), line(), column());}

inlineClosing = slash:(slash __)? closing:closingAngleBracket {
	var node = Node('closing', offset(), text(), line(), column());

	if (slash !== "") {
		node.add(slash[0]);
		node.addList(slash[1]);
	}
	node.add(closing);

	return node;
}

inlineIds = (
	"br"
	/ "link"
	/ "meta"
	/ "input"
	/ "img"
) {return Node('id', offset(), text(), line(), column());}

// ----------------------------------------------------------------------- Block

block = open:opening ws0:__ nodes:(nodeList __)? close:closing {
	var node = Node('block', offset(), text(), line(), column());

	node.add(open);
	node.addList(ws0);
	if (nodes !== "") {
		node.addList(nodes[0]);
		node.addList(nodes[1]);
	}
	node.add(close);

	return node;
}

opening = opening:openingOpening id:id ws0:__ attributes:(attributeList __)? closing:openingClosing {
	var node = Node('opening', offset(), text(), line(), column());

	node.add(opening);
	node.add(id);
	node.addList(ws0);
	if (attributes !== "") {
		node.addList(attributes[0]);
		node.addList(attributes[1]);
	}
	node.add(closing);

	return node;
}
openingOpening = "<" {return Node('opening', offset(), text(), line(), column());}
openingClosing = ">" {return Node('closing', offset(), text(), line(), column());}

closing = opening:closingOpening ws0:__ id:id ws1:__ closing:closingClosing {
	var node = Node('closing', offset(), text(), line(), column());

	node.add(opening);
	node.addList(ws0);
	node.add(id);
	node.addList(ws1);
	node.add(closing);

	return node;
}
closingOpening = "</" {return Node('opening', offset(), text(), line(), column());}
closingClosing = ">" {return Node('closing', offset(), text(), line(), column());}


// ------------------------------------------------------------------- Attribute

attribute = key:id value:(__ attributeAssignmentOperator __ attrValue)? {
	var node = Node('attribute', offset(), text(), line(), column());

	node.add(key);
	if (value !== "") {
		node.addList(value[0]);
		node.add(value[1]);
		node.addList(value[2]);
		node.add(value[3]);
	}

	return node;
}

attributeAssignmentOperator = "=" {return Node('attribute-assignment-operator', offset(), text(), line(), column());}

// TODO handle white spaces without merging them with attributes
attributeList = head:attribute rest:(__ attribute)* {
	return lib.listFromSequence(head, rest);
}

attrValue =
	string
	/ unquotedAttr

unquotedAttr = $(idhead idrest*) {return Node('value', offset(), text(), line(), column());}

// --------------------------------------------------------------------- Strings

string =
	doubleQuoteString
	/ simpleQuoteString

doubleQuoteString = opening:doubleQuoteStringQuote raw:doubleQuoteStringContent? closing:doubleQuoteStringQuote {
	var node = Node('string', offset(), text(), line(), column());

	node.add(opening);
	if (raw !== "") {
		node.add(raw);
	}
	node.add(closing);

	return node;
}
doubleQuoteStringQuote = '"' {return Node('quotes.double', offset(), text(), line(), column());}
doubleQuoteStringContent = $(!'"' .)+ {return Node('doubleQuoteString.content', offset(), text(), line(), column());}


simpleQuoteString = opening:simpleQuoteStringQuote raw:simpleQuoteStringContent? closing:simpleQuoteStringQuote {
	var node = Node('string', offset(), text(), line(), column());

	node.add(opening);
	if (raw !== "") {
		node.add(raw);
	}
	node.add(closing);

	return node;
}
simpleQuoteStringQuote = "'" {return Node('quotes.simple', offset(), text(), line(), column());}
simpleQuoteStringContent = $(!"'" .)+ {return Node('simpleQuoteString.content', offset(), text(), line(), column());}


// -------------------------------------------------------------------- Comments

comment = opening:commentOpening content:commentContent? closing:commentClosing {
	var node = Node('comment', offset(), text(), line(), column());

	node.add(opening);
	if (content !== "") {
		node.add(content);
	}
	node.add(closing);

	return node;
}
commentOpening = "<!--" {return Node('opening', offset(), text(), line(), column());}
commentClosing = "-->" {return Node('closing', offset(), text(), line(), column());}
commentContent = (!commentClosing .)+ {return Node('content', offset(), text(), line(), column());}



// --------------------------------------------------------------------- Various

__ = elements:(wsSequence / comment)* {
	return elements;
}

// Primitives ------------------------------------------------------------------

// -------------------------------------------------------------------------- ID

id = idhead idrest* {return Node('id', offset(), text(), line(), column());}
idhead = idchars
idrest = "-" / digit / idchars
idchars = alpha / idspecial
idspecial = [$_]

// ---------------------------------------------------------------- White spaces

ws = [ \r\n\t]

wsSequence =
	spaces
	/ tabs
	/ eols

spaces = content:" "+ {return Node('spaces', offset(), text(), line(), column());}
tabs = content:"\t"+ {return Node('tabs', offset(), text(), line(), column());}
eols = content:eol+ {
	var node = Node('eols', offset(), text(), line(), column());
	node.addList(content);
	return node;
}
eol = value:("\r\n" / "\n" / "\r") {return Node('eol', offset(), text(), line(), column());}

// --------------------------------------------------------------------- Various

alpha = [a-zA-Z]
digit = [0-9]

// ------------------------------------------------------------------ Characters

closingAngleBracket = ">" {return Node('brackets.angle.closing', offset(), text(), line(), column());}
slash = "/" {return Node('slash', offset(), text(), line(), column());}
