var fs = require('fs');

var benchmark = require('benchmark');
var colour = require('colour');

var normalParser = require('../parser');
var fastParser = require('../fast-parser');



// --------------------------------------------------------------------- Helpers

function mixin() {
	var args = Array.prototype.slice.call(arguments);

	var source = args.pop();

	for (var i = 0, length = args.length; i < length; i++) {
		var addon = args[i];

		for (var key in addon) {
			if ({}.hasOwnProperty.call(addon, key)) {
				source[key] = addon[key];
			}
		}
	}

	return source;
}



// --------------------------------------------------------------------- Logging

colour.setTheme({
	start: ['magenta'],
	cycle: ['green', 'bold'],
	abort: ['magenta'],
	error: ['red', 'bold'],
	reset: ['magenta'],
	complete: ['green', 'bold'],

	name: ['cyan', 'bold', 'italic']
});

function pluralize(term, value, plural) {
	if (plural == null) {plural = 's'}
	return term + (value > 1 ? plural : '');
}

function truncateNumber(value, maxDecimals) {
	if (maxDecimals == null) {maxDecimals = 3}
	return value.toFixed(maxDecimals);
}

/**
 * Takes input as seconds.
 */
function humanizeDuration(value) {
	var units = ['s', 'ms', 'ns'];
	for (i = 0, length = units.length; i < length; i++) {
		if (value >= 1) {
			break;
		}
		value *= 1000;
	}
	return truncateNumber(value) + units[i];

	// if (value >= 1) return truncateNumber(value) + "s";
	// value *= 1000;
	// if (value >= 1) return truncateNumber(value) + "ms";
	// value *= 1000;
	// return truncateNumber(value) + "ns";
}

function logBenchmark(benchmark) {
	console.log(benchmark.name.name);

	var value = benchmark.count;
	console.log("Executed: " + value + " " + pluralize("time", value) + ".");
	console.log("Cycles: " + benchmark.cycles + ".");
	console.log();

	console.log("Mean time: " + humanizeDuration(benchmark.stats.mean) + ".");
	var value = benchmark.hz;
	console.log("Which means can be executed " + truncateNumber(value) + " " + pluralize("time", value) + " per second.");

	console.log("Statistics: ");
	console.log("- deviation: " + benchmark.stats.deviation);
	console.log("- variance: " + benchmark.stats.variance);
	console.log();
}



// ----------------------------------------------------------- Benchmark helpers

var handlers = {
	onStart: function() {
		console.log(("Starting: " + this.name).start);
	},
	// onCycle: function() {
	// 	console.log("Cycle finished".cycle);
	// },
	onAbort: function() {
		console.log((this.name + " aborted").abort);
	},
	onError: function() {
		console.log("An error occurred!".abort);
	},
	onReset: function() {
		console.log((this.name + " reset.").reset);
	},
	onComplete: function() {
		console.log((this.name + " completed successfully!").complete);
	}
};

var benchmarkHandlers = {
	onComplete: function() {
		console.log("Completed successfully: ".complete );
		logBenchmark(this);
	}
};



// --------------------------------------------------------------------- Suite 1

var smallSource = fs.readFileSync('input/small.html', 'utf-8');
var bigSource = fs.readFileSync('input/big.html', 'utf-8');

var suite = benchmark.Benchmark.Suite(mixin(handlers, {name: 'Parsers'}));

var benchmarks = [
	{
		name: 'Fast on small input',

		fn: function() {
			fastParser.parse(smallSource);
		}
	},
	{
		name: 'Normal on small input',

		fn: function() {
			normalParser.parse(smallSource);
		}
	},
	{
		name: 'Fast on big input',

		fn: function() {
			fastParser.parse(bigSource);
		}
	},
	{
		name: 'Normal on big input',

		fn: function() {
			normalParser.parse(bigSource);
		}
	}
];

for (var i = 0, length = benchmarks.length; i < length; i++) {
	suite.add(mixin(handlers, benchmarkHandlers, benchmarks[i]));
}

suite.run();
