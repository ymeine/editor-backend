// Initializer -----------------------------------------------------------------

{
	var lib = require('pegjs-parser/initializer');

	var Node = new lib.NodeInstancier('at', true);

	var blocks = [
		'cdata',
		'text',
		'block'
	];

	Node.addHook(function(node) {
		if (blocks.indexOf(node.type.element) >= 0) {
			node.flag('block');
		}
	});
}



// Grammar ---------------------------------------------------------------------

// ------------------------------------------------------------------------ Root

start = ws0:__ nodes:(nodeList __)? {
	var node = Node('root', null, null, offset(), text());

	node.addList('spaces.0', ws0);

	if (nodes !== null) {
		node.addList('nodes', nodes[0]);
		node.addList('spaces.1', nodes[1]);
	}

	return node;
}

// ----------------------------------------------------------------------- Nodes

node =
	text
	/ statement

// FIXME This rule is used to parse a list of nodes contained in a block element (most of the time)
// These nodes are a mix of text, statements, and comments also.
// However, concerning the comments, they are "eaten" by the "__" rule, whose content is skipped here.
// So concretely if a node contains only text except some content inside, these comments are ignored because of that.
// Review the design of this rule
nodeList = head:node rest:(__ node)* {
	return lib.listFromSequence(head, rest);
}

// ------------------------------------------------------------------------ Text
// The particularity of the text node, is that it is not delimited as other nodes - that is elements, it's just everything that is not an element. So to detect the end of a text, we need to check if an element starts.

text = content:$(!statementStart .)+ {
	return Node('text', null, null, offset(), text());
}

statementStart = "${" / "{" / "/*" / "//"

// ------------------------------------------------------------------ Statements
// WARNING the precedence in alternatives is important!

statement =
	cdata
	/ expression
	/ inline
	/ block

// ----------------------------------------------------------------------- CDATA

cdata = opening:cdataOpening content:cdataContent? closing:cdataClosing {
	var node = Node('cdata', null, null, offset(), text());

	node.add('opening', opening);

	if (content != "") {
		node.add('content', content);
	}

	node.add('closing', closing);

	return node;
}

cdataOpening = opening:cdataOpeningOpening ws0:__ closing:cdataOpeningClosing {
	var node = Node('opening', null, null, offset(), text());
	node.add('opening', opening);
	node.addList('spaces.0', ws0);
	node.add('closing', closing);
	return node;
}

cdataOpeningOpening = "{CDATA" {
	return Node('opening', null, null, offset(), text());
}

cdataOpeningClosing = "}" {
	return Node('closing', null, null, offset(), text());
}

cdataClosing = "{/CDATA}" {
	return Node('closing', null, null, offset(), text());
}

cdataContent = (!cdataClosing .)+ {
	return Node('content', null, null, offset(), text());
}

// ------------------------------------------------------------------ Expression

expression = opening:expressionOpening ws0:__ content:expressionContent? ws1:__ closing:expressionClosing {
	var node = Node('expression', null, null, offset(), text());

	node.add('opening', opening);

	node.addList('spaces.0', ws0);

	if (content != "") {
		node.add('param', content);
	}

	node.addList('spaces.1', ws1);

	node.add('closing', closing);

	return node;
}

expressionOpening = "${" {
	return Node('opening', null, null, offset(), text());
}

expressionClosing = "}" {
	return Node('closing', null, null, offset(), text());
}

// expressionContent = blockStatementParam

// TODO The following is a work in progress and is not actually used for now

expressionContent = value:expressionValue? modifiers:expressionModifierList? {
	var node = Node('content', null, null, offset(), text());

	if (value != "") {
		node.add('value', value);
	}

	if (modifiers != "") {
		node.addList('modifiers', modifiers);
	}

	return node;
}

expressionValue = (!expressionModifierPrefix .)+ {
	return Node('text', null, null, offset(), text());
}

expressionModifierList = head:expressionModifier rest:(__ expressionModifier)* {
	return lib.listFromSequence(head, rest);
}

expressionModifier = prefix:expressionModifierPrefix name:expressionModifierName param:expressionModifierParam? {
	var node = Node('modifier', null, null, offset(), text());
	node.add('prefix', prefix);
	node.add('name', name);
	if (param != "") {
		node.add('param', param);
	}
	return node;
}

expressionModifierPrefix = "|" {
	return Node('prefix', null, null, offset(), text());
}

expressionModifierName = id

expressionModifierParam = prefix:expressionModifierParamPrefix value:expressionModifierParamValue? {
	var node = Node('modifier-param', null, null, offset(), text());
	node.add('prefix', prefix);
	if (value != "") {
		node.add('value', value);
	}
	return node;
}

expressionModifierParamPrefix = ":" {
	return Node('prefix', null, null, offset(), text());
}

// TODO Split param with commas?
expressionModifierParamValue = (!(expressionModifierPrefix / expressionClosing) .)+ {
	return Node('text', null, null, offset(), text());
}

// ---------------------------------------------------------------------- Inline

inline = opening:inlineOpening id:tagId param:inlineStatementParam? closing:inlineClosing {
	var node = Node('inline', null, null, offset(), text());

	node.add('opening', opening);
	node.add('id', id);

	if (param !== null) {
		node.add('param', param);
	}

	node.add('closing', closing);

	return node;
}

inlineOpening = "{" {
	return Node('opening', null, null, offset(), text());
}

inlineClosing = "/}" {
	return Node('closing', null, null, offset(), text());
}

inlineStatementParam = (!inlineClosing bracedContent)+ {
	return Node('text', null, null, offset(), text());
}

// ----------------------------------------------------------------------- Block

block = open:opening ws0:__ nodes:(nodeList __)? close:closing {
	var node = Node('block', null, null, offset(), text());
	node.add('openTag', open);
	node.addList('spaces.0', ws0);
	if (nodes !== null) {
		node.addList('nodes', nodes[0]);
		node.addList('spaces.1', nodes[1]);
	}
	node.add('closeTag', close);
	return node;
}

opening = opening:openingOpening id:tagId param:blockStatementParam? closing:openingClosing {
	var node = Node('opening', null, null, offset(), text());

	node.add('opening', opening);
	node.add('id', id);

	if (param !== null) {
		node.add('param', param);
	}

	node.add('closing', closing);

	return node;
}

openingOpening = "{" {
	return Node('opening', null, null, offset(), text());
}

openingClosing = "}" {
	return Node('closing', null, null, offset(), text());
}

blockStatementParam = (!"}" bracedContent)+ {
	return Node('text', null, null, offset(), text());
}

closing = opening:closingOpening id:tagId closing:closingClosing {
	var node = Node('closing', null, null, offset(), text());
	node.add('opening', opening);
	node.add('id', id);
	node.add('closing', closing);
	return node;
}

closingOpening = "{/" {
	return Node('opening', null, null, offset(), text());
}

closingClosing = "}" {
	return Node('closing', null, null, offset(), text());
}

// ------------------------------------------------------------------------- Tag
// FIXME Check the id specification

tagId =
	widgetId
	/ id

widgetId = prefix:widgetIdPrefix ns:id separator:widgetNamespaceWidgetSeparator widget:id {
	var node = Node('widgetId', null, null, offset(), text());
	node.add('prefix', prefix);
	node.add('namespace', ns);
	node.add('separator', separator)
	node.add('widget', widget);
	return node;
}

widgetIdPrefix = "@" {
	var node = Node('prefix', null, null, offset(), text());
}

widgetNamespaceWidgetSeparator = ":" {
	var node = Node('separator', null, null, offset(), text());
}

// ----------------------------------------------------------------------- Param
// FIXME There can be some }, depending on the context: JS Object, string, comment, ...

bracedContent = braced / nonbraced

braced = $("{" content:bracedContent* "}")

nonbraced =
	$("\\" ("{" / "}"))
	/ [^{}]

// -------------------------------------------------------------------- Comments

comment =
	multiLineComment
	/ singleLineComment

multiLineComment = opening:multiLineCommentOpening content:multiLineCommentContent? closing:multiLineCommentClosing {
	var node = Node('multi-line-comment', null, null, offset(), text());

	node.add('opening', opening);
	if (content !== null) {
		node.add('content', content);
	}
	node.add('closing', closing);

	return node;
}

multiLineCommentOpening = "/*" {
	return Node('opening', null, null, offset(), text());
}

multiLineCommentClosing = "*/" {
	return Node('closing', null, null, offset(), text());
}

multiLineCommentContent = (!multiLineCommentClosing .)+ {
	return Node('content', null, null, offset(), text());
}

singleLineComment =  opening:singleLineCommentOpening content:singleLineCommentContent? closing:singleLineCommentClosing {
	var node = Node('single-line-comment', null, null, offset(), text());

	node.add('opening', opening);
	if (content !== null) {
		node.add('content', content);
	}
	node.add('closing', closing);

	return node;
}

singleLineCommentOpening = "//" {
	return Node('opening', null, null, offset(), text());
}

singleLineCommentClosing = node:eol {
	node.type.element = 'closing' // dirty hack
	return node;
}

singleLineCommentContent = (!singleLineCommentClosing .)+ {
	return Node('content', null, null, offset(), text());
}

// --------------------------------------------------------------------- Various

__ = elements:(wsSequence / comment)* {
	return elements;
}

// Primitives ------------------------------------------------------------------

// -------------------------------------------------------------------------- ID

id = idhead idrest* {
	return Node('id', null, null, offset(), text());
}
idhead = idchars
idrest = digit / idchars
idchars = alpha / idspecial
idspecial = [_]

// ---------------------------------------------------------------- White spaces

ws = [ \r\n\t]

wsSequence =
	spaces
	/ tabs
	/ eols

spaces = content:" "+ {
	var node = Node('spaces', null, null, offset(), text());
	node.set('size', content.length);
	return node;
}

tabs = content:"\t"+ {
	var node = Node('tabs', null, null, offset(), text());
	node.set('size', content.length);
	return node;
}

eols = content:eol+ {
	var node = Node('eols', null, null, offset(), text());
	node.addList('eol', content);
	return node;
}

eol = value:("\r\n" / "\n" / "\r") {
	var node = Node('eol', null, null, offset(), text());
	node.set('value', value);
	return node;
}

// --------------------------------------------------------------------- Various

alpha = [a-zA-Z]
digit = [0-9]
