// --------------------------------------------------------------------- Helpers

/**
 * Populates the last given argument with properties of all previous arguments, in the given order.
 */
function mixin() {
	var args = Array.prototype.slice.call(arguments);

	var source = args.pop();

	for (var i = 0, length = args.length; i < length; i++) {
		var addon = args[i];

		for (var key in addon) {
			if ({}.hasOwnProperty.call(addon, key)) {
				source[key] = addon[key];
			}
		}
	}

	return source;
}

function each(cb, array) {
	for (var index = 0, length = array.length; index < length; index++) {
		if (cb(array[index], index, array) === true) {
			break;
		}
	}

	return index;
}

function map(cb, array) {
	var result = [];

	for (var index = 0, length = array.length; index < length; index++) {
		try {
			result.push(cb(array[index], index, array));
		} catch (exception) {
			break;
		}
	}

	return result;
}


// --------------------------------------------------------------------- Logging

function pluralize(term, value, plural) {
	if (plural == null) {plural = 's'}
	return term + (value > 1 ? plural : '');
}

function truncateNumber(value, maxDecimals) {
	if (maxDecimals == null) {maxDecimals = 3}
	return value.toFixed(maxDecimals);
}

function completeLine(text, options) {
	if (options == null) {options = {}};
	if (options.character == null) {options.character = '-'};
	if (options.width == null) {options.width = 80};
	if (options.addSpace == null) {options.addSpace = true};

	var output;

	output = text;

	if (output.length >= options.width) {
		return output;
	}

	if (options.addSpace) {
		if (output.length >= options.width + 1) {
			return output
		}

		output += ' ';
	}

	for (
		var i = 0, length = options.width - output.length;
		i < length;
		i++
	) {
		output += options.character;
	}

	return output;
}

/**
 * Takes input as seconds.
 */
function humanizeDuration(value) {
	var units = ['s', 'ms', 'ns'];
	for (i = 0, length = units.length; i < length; i++) {
		if (value >= 1) {
			break;
		}
		value *= 1000;
	}
	return truncateNumber(value) + units[i];

	// if (value >= 1) return truncateNumber(value) + "s";
	// value *= 1000;
	// if (value >= 1) return truncateNumber(value) + "ms";
	// value *= 1000;
	// return truncateNumber(value) + "ns";
}



exports.mixin = mixin;
exports.each = each;
exports.map = map;

exports.pluralize = pluralize;
exports.truncateNumber = truncateNumber;

exports.humanizeDuration = humanizeDuration;
exports.completeLine = completeLine;
