// --------------------------------------------------------------------- Helpers

/**
 * Populates the last given argument with properties of all previous arguments, in the given order.
 */
function mixin() {
	var args = Array.prototype.slice.call(arguments);

	var source = args.pop();

	for (var i = 0, length = args.length; i < length; i++) {
		var addon = args[i];

		for (var key in addon) {
			if ({}.hasOwnProperty.call(addon, key)) {
				source[key] = addon[key];
			}
		}
	}

	return source;
}



// --------------------------------------------------------------------- Logging

function pluralize(term, value, plural) {
	if (plural == null) {plural = 's'}
	return term + (value > 1 ? plural : '');
}

function truncateNumber(value, maxDecimals) {
	if (maxDecimals == null) {maxDecimals = 3}
	return value.toFixed(maxDecimals);
}

function completeLine(text, options) {
	options = options || {};
	character = options.character || '-';
	width = options.width || 80;
	addSpace = options.addSpace || true;

	if (addSpace) {
		text += ' ';
	}

	if (text.length >= width) {
		return text;
	}

	for (var i = 0, length = width - text.length; i < length; i++) {
		text += character;
	}

	return text;
}

/**
 * Takes input as seconds.
 */
function humanizeDuration(value) {
	var units = ['s', 'ms', 'ns'];
	for (i = 0, length = units.length; i < length; i++) {
		if (value >= 1) {
			break;
		}
		value *= 1000;
	}
	return truncateNumber(value) + units[i];

	// if (value >= 1) return truncateNumber(value) + "s";
	// value *= 1000;
	// if (value >= 1) return truncateNumber(value) + "ms";
	// value *= 1000;
	// return truncateNumber(value) + "ns";
}



exports.mixin = mixin;
exports.pluralize = pluralize;
exports.completeLine = completeLine;
exports.truncateNumber = truncateNumber;
exports.humanizeDuration = humanizeDuration;
