var prelude = require('prelude-ls');
var benchmark = require('benchmark');
var colour = require('colour');

var helpers = require('./helpers');



// --------------------------------------------------------------------- Logging

// Configures logging system
// Defines specific data logging functions

colour.setTheme({
	start: ['magenta'],
	cycle: ['green', 'bold'],
	abort: ['red', 'bold'],
	error: ['red', 'bold'],
	reset: ['magenta'],
	complete: ['green', 'bold'],

	name: ['cyan', 'bold', 'italic']
});

function logBenchmark(benchmark) {
	console.log(benchmark.name.name);

	console.log("Mean time: " + helpers.humanizeDuration(benchmark.stats.mean) + " (" + helpers.truncateNumber(benchmark.hz) + " ops/s).");

	console.log("(deviation: " + benchmark.stats.deviation + " - variance: " + benchmark.stats.variance + ")");
	console.log();
}



// ----------------------------------------------------------- Benchmark helpers

var handlers = {
	onStart: function() {
		console.log(helpers.completeLine("Starting: " + this.name).start);
	},
	// onCycle: function() {
	// 	console.log("Cycle finished".cycle);
	// },
	onAbort: function() {
		console.log((this.name + " aborted").abort);
	},
	onError: function(error) {
		console.log("An error occurred!".abort);
		console.error(error.message);
		// process.exit(1);
	},
	onReset: function() {
		console.log((this.name + " reset.").reset);
	},
	onComplete: function() {
		console.log((this.name + " completed successfully!").complete);
	}
};

var benchmarkHandlers = {
	onComplete: function() {
		console.log("Completed successfully: ".complete);
		logBenchmark(this);
	},

	onStart: function() {
		console.log(("Starting: " + this.name).start);
	}
};



// ---------------------------------------------------------------------- Export

exports.benchmarker_1 = function(name, parsers, inputs) {
	var suite = benchmark.Benchmark.Suite(helpers.mixin(handlers, {name: name}));

	prelude.each(function(input) {
		prelude.each(function(parser) {
			suite.add(helpers.mixin(handlers, benchmarkHandlers, {
				name: 'Parser: ' + parser.name + ' / input: ' + input.name,
				fn: function() {
					parser.parser.parse(input.source);
				}
			}));
		}, parsers);
	}, inputs);

	suite.run();

	// return suite;

	return {
		name: suite.name,
		result: prelude.map(function(benchmark) {
			return {
				result: {
					times: benchmark.stats.sample
				},
				stats: {
					executions: benchmark.stats.sample.length,
					total: benchmark.times.elapsed * 1000,

					mean_ns: benchmark.stats.mean * 1000,
					mean_ms: benchmark.stats.mean,
					mean_s: benchmark.stats.mean / 1000,

					ops_ns: benchmark.hz / 1000,
					ops_ms: benchmark.hz,
					ops_s: benchmark.hz * 1000
				},
				benchmark: benchmark.name,
				_benchmark: {
					count: benchmark.count, // total count
					cycles: benchmark.cycles, // number of cycles, ?
					hz: benchmark.hz // ops/s
				}
			}
		}, suite)
	};
}



var Suite = require('./suite').Suite;

exports.benchmarker_2 = function(name, parsers, inputs) {
	var benchmarks = [];
	prelude.each(function(input) {
		prelude.each(function(parser) {
			benchmarks.push({
				name: 'Parser: ' + parser.name + ' / input: ' + input.name,
				fn: function() {
					parser.parser.parse(input.source);
				}
			});
		}, parsers);
	}, inputs);

	var suite = Suite({
		name: name,
		benchmarks: benchmarks
	});

	return suite.run(true);
}
